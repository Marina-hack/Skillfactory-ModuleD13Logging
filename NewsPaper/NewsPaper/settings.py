"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import logging
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5*(ny#!3*-m#v+#4_p_h7ybw%ux2!-t8fk978&9k)12!31j_@7'

LOGGER = logging.getLogger(__name__)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # форматер
    'formatters': {
        'simple': {
            'format': ' {levelname} {message} {asctime} ',
            'style': '{',
        },
        'verbose': {
            'format': ' {levelname} {message}'
                      ' {pathname} {asctime}',
            'style': '{',
        },
        'verbose2': {
            'format': ' {levelname} {message} '
                      '{pathname}' '{exc_info} {asctime}',
            'style': '{',
        },
        'simple2': {
            'format': ' {levelname} {message} {module} {asctime}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    # обработчики
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_true'],

        },
        'news': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'simple2',
        },
        'file': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'verbose2',
        },
        'file2': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'simple2',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
            'filters': ['require_debug_false']
        },
        'console_warning': {
            'level': 'WARNING',
            'formatter': 'verbose',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'console_error': {
            'level': 'ERROR',
            'formatter': 'verbose2',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
    },
    # регистратор
    'loggers': {
        'django': {
            'handlers': ['news', 'console', 'file'],
            'level': 'DEBUG',
            'filename': 'general.log',
            'propagate': True
        },
        'django.request': {
            'handlers': ['mail_admins', 'file'],
            'filename': 'errors.log',
            'level': 'ERROR',
            'formatter': 'verbose2',
            'propagate': False
        },
        'django.server': {
            'level': 'ERROR',
            'filename': 'errors.log',
            'handlers': ['mail_admins', 'file'],
            'formatter': 'verbose2',
            'propagate': False
        },
        'django.template': {
            'level': 'ERROR',
            'filename': 'errors.log',
            'handlers': ['file'],
            'formatter': 'verbose2',
            'propagate': False
        },
        'django.db.backends': {
            'level': 'ERROR',
            'filename': 'errors.log',
            'handlers': ['file'],
            'formatter': 'verbose2',
            'propagate': False
        },
        'django.security': {
            'level': 'INFO',
            'filename': 'security.log',
            'handlers': ['file2'],
            'formatter': 'simple2',
            'propagate': False
        },
    }
    # },
    #     'loggers': {
    #         'django': {
    #             'handlers': ['console'],
    #             'level': 'DEBUG',
    #             'propagate': True,
    #         },
    #         'django.request': {
    #             'handlers': ['mail_admins'],
    #             'filename': 'errors.log',
    #             'level': 'ERROR',
    #             'propagate': False,
    #         }
    #     }
}
# django.server, django.template, django.db.backends.


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',

    'django.contrib.sites',
    'django.contrib.flatpages',
    # 'news',
    'news.apps.NewsConfig',
    'accounts',
    'django_filters',
    'django_apscheduler',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    # кеширование:
    # 'django.middleware.cache.UpdateCacheMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

LOCALE_PATH = [
    os.path.join(BASE_DIR, 'locale')
]


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': '',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True
#^Эта строчка говорит нам о том, что интернационализации будут поддерживаться в приложении.

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / "static"]

LOGIN_REDIRECT_URL = "/news"

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_FORMS = {'signup': 'accounts.forms.CustomSignupForm'}
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = "stg54@yandex.ru"
EMAIL_HOST_PASSWORD = "jiwniafsmqtlaciy"
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = "stg54@yandex.ru"

SERVER_EMAIL = "stg54@yandex.ru"
MANAGERS = (
    # ('Mara', 'belladonnamia@yahoo.com'),
    ('Marina', 'ketberri@yandex.ru'),
)
ADMINS = (
    ('Mar', 'ketberri@gmail.com'),
)

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# если оставить так (console) то письма будуть приходить в консоль
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

SITE_URL = 'http://127.0.0.1:8000/'

CELERY_BROKER_URL = 'redis://default:zJ9vQQN9wDzolR8MJbWBnjL6fwFD6Kma@redis-16312.c302.asia-northeast1-1.gce.cloud.redislabs.com:16312'
CELERY_RESULT_BACKEND = 'redis://default:zJ9vQQN9wDzolR8MJbWBnjL6fwFD6Kma@redis-16312.c302.asia-northeast1-1.gce.cloud.redislabs.com:16312'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# broker_connection_retry_on_startup = True

CACHES = {
    'default': {
        # 'TIMEOUT': 60,
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}
# Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py
